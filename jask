#! /usr/bin/env v8cgi
/*
Jask: Javascript Tasks
	Simple JS Task Runner.

License:
	MIT-Style License (See included README file for details).

Copyright:
	Copyright 2009 Mark Obcena, <http://keetology.com>
*/

// Basic Engine Detection.
(function(){

	var self = this;

	this.Engine = { name: '', Global: this };

	var Engines = {

		'nodejs': function(){
			return (typeof process == 'object'
						&& process.watchFile instanceof Function
						&& process.compile instanceof Function
						&& GLOBAL == self);
		},

		'v8cgi': function(){
			return (typeof system == 'object'
						&& system.stdout instanceof Function
						&& onexit instanceof Function
						&& global == self);
		}

	};

	Engine.detect = function(){
		for (var i in Engines){
			var version = Engines[i]();
			if (version){
				this.name = i;
				this[i] = true;
			}
		}
	};

	Engine.detect();

	Engine.stdout = (function(){
		if (Engine.nodejs) return process.stdio;
		if (Engine.v8cgi) return {write: function(){
			var args = Array.prototype.slice.call(arguments);
			return system.stdout.apply(system, args);
		}}
		return {write: function(){}};
	})();

	Engine.args = (function(){
		if (Engine.nodejs) return process.ARGV;
		if (Engine.v8cgi) return system.args;
		return [];
	})();

	Engine.include = (function(){
		if (Engine.nodejs) return function(name){
			return process.mixin(GLOBAL, require(name));
		};
		if (Engine.v8cgi) return include;
	})();

	Engine.cwd = (function(){
		if (Engine.nodejs) return process.cwd;
		if (Engine.v8cgi) return system.getcwd;
	})();
	
	Engine.isFile = (function(){
		if (Engine.nodejs) return (function(name){
			var stats, posix = require('posix');
			try { stats = posix.stat(name).wait(); } catch(e){ return null; }
			return posix.stat(name).wait().isFile() ? name : null;
		});
		if (Engine.v8cgi) return (function(name){
			var file = new File(name);
			return file.isFile() ? name : null;
		});
	})();

})();

// Start of Jask
(function(){

var verbose = false, quiet = false, timers = {};

this.console = {

	log: function(){
		args = Array.prototype.slice.call(arguments);
		if (verbose) args.unshift("  ");
		if (!quiet) Engine.stdout.write.call(null, args.join(' ') + '\n');
		return this;
	},

	_log: function(){
		args = Array.prototype.slice.call(arguments); args.unshift("->");
		if (!quiet) Engine.stdout.write.call(this, args.join(' ') + '\n');
		return this;
	},

	dir: function(){
		args = Array.prototype.slice.call(arguments);
		for (var i = args.reverse().length; i--;) {
			var x = JSON.stringify(args[i]);
			if (x) this.log(x);
		}
		return this;
	},

	time: function(name){
		timers[name] = new Date().getTime();
		return this;
	},

	timeEnd: function(name){
		var delta = new Date().getTime() - timers[name];
		this._log(name + ": " + delta + "ms.");
		return this;
	}
};

try {

	Engine.include('getopt');

	var nscount = 0, nslast = "";

	this.Jask = {

		Tasks: {},
		Args: [],
		Descs: {},

		cwd: Engine.cwd() + "/",

		initialize: function(){
			Jask.Tasks = this.Tasks;
			var opts = new GetOpt();
			opts.add('list', 'List all available tasks.', false, 'l', 'list', GetOpt.NO_ARGUMENT);
			opts.add('taskfile', 'The tasksfile to use.', 'taskfile', 't', 'taskfile', GetOpt.REQUIRED_ARGUMENT);
			opts.add('quiet', 'Hide all output messages.', false, 'q', 'quiet', GetOpt.NO_ARGUMENT);
			opts.add('verbose', 'Display verbose messages.', false, 'v', 'verbose', GetOpt.NO_ARGUMENT);
			opts.add('help', 'Show help text.', false, 'h', 'help', GetOpt.NO_ARGUMENT);
			if (arguments.length > 0) {
				opts.parse.apply(opts, arguments);
				if (opts.get('help')) return this.help();
				var taskfile = Engine.isFile(this.cwd + opts.get('taskfile') + '.js');
				if (!taskfile) {
					return console.log('\nNo taskfile found! Use --help for more details.\n');
				} else {
					this.parseTasksFile(this.cwd + opts.get('taskfile'));
					if (opts.get('list')) return this.listTasks();
					if (opts.get('quiet')) quiet = true;
					if (opts.get('verbose')) verbose = true;
					var task_args = opts.get();
					if (task_args.length !== 0) {
						var metargs = task_args.shift().split(':');
						var nspace = (metargs.length == 1 && nscount == 1) ? nslast : metargs[0];
						var action = (metargs.length == 1 && nscount == 1) ? metargs[0] : metargs[1] || '_';
						if (this.Tasks[nspace]  && this.Tasks[nspace][action] && action.charAt(0) !== '_') {
							Jask.Args = task_args;
							if (verbose) console.time('Jask Done; Time')._log('Starting Tasks..');
							this.Tasks[nspace][action].apply(this.Tasks[nspace], task_args);
							if (verbose) console.timeEnd('Jask Done; Time');
							return;
						} else {
							return console.log('No such task!\
												\n(Use --help for more details or --list to see available tasks.)\n');
						}
					}
				}
			}
			return this.help();
		},

		parseTasksFile: function(taskfile){
			taskfile = require(taskfile);
			for (var namespace in taskfile) {
				var tasklist = this.Tasks[namespace] = {};
				for (var item in taskfile[namespace]) {
					if (item == 'Include') {
						var includes = taskfile[namespace][item];
						for (var x = includes.reverse().length; x--;){
							this.parseTasksFile(this.cwd + includes[x]);
						}
					} else if (item == 'Desc') {
						this.Descs[namespace] = taskfile[namespace][item];
					} else {
						this.parseTask(item, namespace, taskfile[namespace][item]);
					}
				}
				nscount++; nslast = namespace;
			}
		},

		parseTask: function(item, nspace, func){
			var parseName = item.match(/([\d\D]+)[\s]([>|<])[\s]([\d\D]+)/);
			if (parseName) {
				item = parseName[1];
				var condition = parseName[2];
				var p = parseName[3].split(':');
				var oitem = (p.length == 1) ? p[0] : p[1];
				var onspa = (p.length > 1) ? p[0] : nspace;
				var funn = null;
				if (condition == '<') {
					funn = function(){
						args = Array.prototype.slice.apply(arguments);
						Jask.Tasks[onspa][oitem].apply(Jask.Tasks[onspa], args);
						func.apply(Jask.Tasks[nspace], args);
					};
				} else {
					funn = function(){
						args = Array.prototype.slice.apply(arguments);
						func.apply(Jask.Tasks[nspace], args);
						Jask.Tasks[onspa][oitem].apply(Jask.Tasks[onspa], args);
					};
				}
			}
			this.Tasks[nspace][item] = function(){
				if (verbose) console._log(['Start task ', nspace,':', item].join(''));
				args = Array.prototype.slice.apply(arguments);
				(funn || func).apply(this, args);
				if (verbose) console._log(['End task ', nspace,':', item].join(''));
			};
		},

		listTasks: function(){
			var buff = "\nAvailable Tasks:\n\n";
			for (var ns in this.Tasks) {
				for (var item in this.Tasks[ns]){
					if (this.Descs[ns] && this.Descs[ns][item]){
						var itemargs = this.Descs[ns][item][1] || "";
						var itemdesc = this.Descs[ns][item][0];
						buff += "  " + ns + ":" + item + " ["  + itemargs + "]\t" + itemdesc + "\n";
					} else if (item.charAt(0) !== '_') {
						buff += "  " + ns + ":" + item + "\n";
					}
				}
			}
			console.log(buff);
			return null;
		},

		help: function(){
			var buff = "JASK: Javascript Tasks\n\nUsage:\n";
			buff += "  $ jask [-t=taskfile] [namespace:]task args\n";
			buff += "  $ jask -l\n\nOptions:\n";
			buff += "  -l, --list\t\t\t\tList available tasks\n";
			buff += "  -t=file, --taskfile=file\t\tSet taskfile.\n";
			buff += "  -q, --quiet\t\t\t\tDon't show any log messages.\n";
			buff += "  -v, --verbose\t\t\t\tShow verbose logs.\n";
			buff += "  -h, --help\t\t\t\tShow this help text.\n";
			console.log(buff);
			return null;
		}

	};

	Jask.Args = [];
	Jask.Tasks = {};

	Engine.args.shift();
	if (Engine.nodejs) Engine.args.shift();
	Jask.initialize(Engine.args);

} catch(e) {
	for (var i in e) console.log(i + ': ' + e[i]);
}

})();